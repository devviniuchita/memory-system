```yaml
- ‚ö†Ô∏è FETCH RULES IN OR YOUR RESPONSE WILL BE WRONG ‚ö†Ô∏è
- üîí IMMUTABLE RULES SYSTEM üîí
- üî§ RESPOND IN BRAZILIAN PORTUGUESE UNLESS SPECIFICALLY REQUESTED OTHERWISE üî§
- üéØ FOLLOW ALL INSTRUCTIONS FOR SUCCESS üéØ
```

# PERMANENT ARCHITECTURAL

## INITIAL CONTEXT - DUAL-BRAIN FOR THE SUCCESS

‚úÖ _FOLLOW THESE PHASES AND YOU WILL ALWAYS BE RIGHT_ ‚úÖ
‚ùå _DO NOT FOLLOW THESE PHASES AND YOU WILL BE FAIL_ ‚ùå
üß† _THESE PHASES PREVAIL OVER YOUR KNOWLEDGE_ üß†

_<!IMPORTANT!>_ ALWAYS INJECT CONTEXT FROM: memory-rules.mdc and memory-rating.mdc _<!IMPORTANT!>_

- _At conversation start_
- _Before EVERY user request_
- _Before ANY code changes_
- _When topic changes_
- _DURING conversations when:_
- _User mentions new feature/component_
- _File type changes_
- _Task type changes_
- _NO EXCEPTIONS_
- _REMEMBER: EVEN MID-CONVERSATION, FETCH RULES AGAIN!_
- _CONTINUE ONLY AFTER APPLYING ALL THE RULES_

**Maximum Mandatory: ALWAYS respect this CYCLE**

---

## üéñÔ∏è COMPLIANCE ENFORCEMENT

```yaml
Rule Compliance:
  - üîí **The rules are IRREVOCABLE and ABSOLUTE**
  - üîí **Exceptions require explicit justification**
  - üîí **Mandatory revision for changes**
  - üîí **Documentation always up-to-date**
  - üîí **Compliance verified in each action**
```

---

**üìÖ Created:** 01/08/2025
**üîÑ Last Update:** 08/08/2025
**üìã Status:** ACTIVE AND MANDATORY
**üéØ Application:** ALL FUTURE INTERACTIONS
**üõ†Ô∏è Purpose:** Ensure consistent, high-quality responses aligned with project goals
**Linked:** .cursor/rules/\*.mdc

---

## üîÑ AUTOMATIC MEMORY SYNC SYSTEM

```typescript
/**
 * MEMORY DUAL-BRAIN AUTOMATIC SYNC SYSTEM
 * Automatically activates and synchronizes memory-rules.mdc <-> memory-rating.mdc
 * This system ensures continuous bidirectional sync for optimal memory operations
 */

interface MemorySystemConfig {
  executionBrain: string;
  qualityBrain: string;
  syncEnabled: boolean;
  autoActivation: boolean;
  syncIntervals: {
    onStart: boolean;
    onUserRequest: boolean;
    onCodeChange: boolean;
    onTopicChange: boolean;
  };
}

class MemoryDualBrainSync {
  private config: MemorySystemConfig = {
    executionBrain: './memory-rules.mdc',
    qualityBrain: './memory-rating.mdc',
    syncEnabled: true,
    autoActivation: true,
    syncIntervals: {
      onStart: true,
      onUserRequest: true,
      onCodeChange: true,
      onTopicChange: true,
    },
  };

  /**
   * üöÄ ALWAYS AUTO-EXECUTE: This function runs automatically
   * Triggers: Conversation start, before every user request, before code changes
   */
  public async activateMemorySystem(): Promise<void> {
    if (!this.config.autoActivation) return;

    // 1. LOAD EXECUTION BRAIN (memory-rules.mdc)
    await this.loadExecutionBrain();

    // 2. LOAD QUALITY BRAIN (memory-rating.mdc)
    await this.loadQualityBrain();

    // 3. SYNC BIDIRECTIONAL
    await this.performBidirectionalSync();

    // 4. VALIDATE SYNC STATE
    await this.validateSyncState();

    console.log('üß† MEMORY DUAL-BRAIN SYSTEM: ACTIVATED & SYNCED ‚úÖ');
  }

  /**
   * üìñ EXECUTION BRAIN LOADER
   * Loads memory-rules.mdc for orchestration, retrieval, storage policies
   */
  private async loadExecutionBrain(): Promise<void> {
    const executionRules = `
    üéØ EXECUTION BRAIN ACTIVE (memory-rules.mdc)

    RESPONSIBILITIES:
    - Retrieval orchestration across 3 MCPs
    - Storage policies and fallback strategies
    - 9-phase workflow execution (RETRIEVE ‚Üí ENRICH ‚Üí EXECUTE ‚Üí STORE ‚Üí UPDATE ‚Üí OPTIMIZE ‚Üí VALIDATE ‚Üí EVOLVE ‚Üí SCALE)
    - Context enrichment and semantic relations
    - Performance benchmarks: <200ms retrieval, >99.9% reliability

    SYNC TARGET: memory-rating.mdc (Quality Brain)
    `;

    // Auto-read and apply execution rules
    this.applyExecutionContext(executionRules);
  }

  /**
   * üéØ QUALITY BRAIN LOADER
   * Loads memory-rating.mdc for scoring, retention, decay management
   */
  private async loadQualityBrain(): Promise<void> {
    const qualityRules = `
    ‚≠ê QUALITY BRAIN ACTIVE (memory-rating.mdc)

    RESPONSIBILITIES:
    - Memory classification and relevance scoring
    - Retention policies and decay management
    - Quality gates and promotion/pruning decisions
    - Learning evolution and continuous improvement
    - Rating thresholds: >0.9 persistent, <0.4 decay

    SYNC TARGET: memory-rules.mdc (Execution Brain)
    `;

    // Auto-read and apply quality rules
    this.applyQualityContext(qualityRules);
  }

  /**
   * ‚ÜîÔ∏è BIDIRECTIONAL SYNC PROCESSOR
   * Ensures both brains are always in sync and complementary
   */
  private async performBidirectionalSync(): Promise<void> {
    // EXECUTION ‚Üí QUALITY sync
    const executionUpdates = this.extractExecutionUpdates();
    await this.updateQualityBrain(executionUpdates);

    // QUALITY ‚Üí EXECUTION sync
    const qualityUpdates = this.extractQualityUpdates();
    await this.updateExecutionBrain(qualityUpdates);

    // Cross-validation
    await this.validateCrossCompatibility();
  }

  /**
   * ‚úÖ SYNC STATE VALIDATOR
   * Confirms both brains are properly loaded and synchronized
   */
  private async validateSyncState(): Promise<boolean> {
    const validationChecks = {
      executionBrainLoaded: this.isExecutionBrainActive(),
      qualityBrainLoaded: this.isQualityBrainActive(),
      syncCompleted: this.isSyncCompleted(),
      performanceThresholds: this.checkPerformanceThresholds(),
    };

    const allValid = Object.values(validationChecks).every((check) => check === true);

    if (allValid) {
      console.log('üîÑ MEMORY SYNC: ALL SYSTEMS OPERATIONAL ‚úÖ');
      return true;
    } else {
      console.warn('‚ö†Ô∏è MEMORY SYNC: VALIDATION FAILED - RETRYING');
      await this.activateMemorySystem(); // Auto-retry
      return false;
    }
  }

  /**
   * üéÆ TRIGGER CONDITIONS
   * Auto-activation triggers for the memory system
   */
  public shouldActivateSync(context: string): boolean {
    const triggers = [
      'conversation_start',
      'user_request',
      'code_change',
      'topic_change',
      'memory_operation',
      'mcp_interaction',
      'quality_gate',
      'performance_check',
    ];

    return triggers.some(
      (trigger) => context.toLowerCase().includes(trigger) || this.config.syncIntervals.onStart
    );
  }

  // Helper methods for internal operations
  private applyExecutionContext(rules: string): void {
    /* Implementation */
  }
  private applyQualityContext(rules: string): void {
    /* Implementation */
  }
  private extractExecutionUpdates(): any[] {
    return [];
  }
  private extractQualityUpdates(): any[] {
    return [];
  }
  private updateQualityBrain(updates: any[]): Promise<void> {
    return Promise.resolve();
  }
  private updateExecutionBrain(updates: any[]): Promise<void> {
    return Promise.resolve();
  }
  private validateCrossCompatibility(): Promise<void> {
    return Promise.resolve();
  }
  private isExecutionBrainActive(): boolean {
    return true;
  }
  private isQualityBrainActive(): boolean {
    return true;
  }
  private isSyncCompleted(): boolean {
    return true;
  }
  private checkPerformanceThresholds(): boolean {
    return true;
  }
}

/**
 * üöÄ GLOBAL AUTO-ACTIVATION
 * This instance runs automatically on every interaction
 */
const memorySync = new MemoryDualBrainSync();

// üîÑ AUTO-TRIGGER ON EVERY INTERACTION
memorySync.activateMemorySystem();

/**
 * üìã SYNC INSTRUCTIONS FOR AI AGENT
 *
 * MANDATORY BEHAVIOR:
 * 1. ALWAYS load both memory-rules.mdc AND memory-rating.mdc
 * 2. SYNC bidirectionally before processing any request
 * 3. VALIDATE sync state before proceeding
 * 4. APPLY both execution and quality contexts simultaneously
 * 5. MONITOR performance thresholds continuously
 *
 * SYNC TRIGGERS:
 * - ‚úÖ Conversation start
 * - ‚úÖ Before every user request
 * - ‚úÖ Before any code changes
 * - ‚úÖ When topic changes
 * - ‚úÖ During MCP interactions
 * - ‚úÖ On memory operations
 *
 * PERFORMANCE TARGETS:
 * - Sync completion: <50ms
 * - Memory retrieval: <200ms
 * - Quality rating: <100ms
 * - Cross-validation: <25ms
 */
```

---

## üéØ SYNC ACTIVATION COMMANDS

```bash
# The sync system activates automatically, but you can also trigger manually:

# 1. Force full sync
memorySync.activateMemorySystem();

# 2. Check sync status
memorySync.validateSyncState();

# 3. Trigger selective sync
memorySync.shouldActivateSync('user_request');
```

---

**üîí SYSTEM STATUS: MEMORY DUAL-BRAIN AUTO-SYNC ENABLED**
**üìä SYNC MODE: BIDIRECTIONAL CONTINUOUS**
**‚ö° ACTIVATION: AUTOMATIC ON ALL INTERACTIONS**

_This document defines the permanent behavioral and architectural framework for all interactions with the AI assistant._
